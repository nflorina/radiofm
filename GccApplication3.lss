
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e0  00800100  00000a48  00000adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  008002e0  008002e0  00000cbc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001240  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098f  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000761  00000000  00000000  00002a07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00003168  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ce  00000000  00000000  00003350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000695  00000000  00000000  0000381e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003eb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3e       	cpi	r26, 0xE0	; 224
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a0 ee       	ldi	r26, 0xE0	; 224
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 31       	cpi	r26, 0x1D	; 29
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ae 01 	call	0x35c	; 0x35c <main>
  9e:	0c 94 22 05 	jmp	0xa44	; 0xa44 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <spi_init>:
//clock rate: 12Mhz
void spi_init(void){
	
	// Enable SPI with no prescaler (The LCD controller is fast enough for this)
	// See ATMega8 Datasheet page XXX for use
	SPCR = ((0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0));
  a6:	80 e5       	ldi	r24, 0x50	; 80
  a8:	8c bd       	out	0x2c, r24	; 44
  aa:	08 95       	ret

000000ac <LCD_writeCommand>:
--------------------------------------------------------------------------------------------------*/
// There is no reason to mess with this function
void LCD_writeCommand ( unsigned char command ){

	//PORTB = _BV(PB0);	// Enable LED to indicate activity
    CLEAR_SCE_PIN;	  	//enable LCD
  ac:	28 98       	cbi	0x05, 0	; 5
	
	CLEAR_DC_PIN;	  	// set LCD in command mode
  ae:	2a 98       	cbi	0x05, 2	; 5
	
    // Send data to display controller.
    SPDR = command;
  b0:	8e bd       	out	0x2e, r24	; 46
	
    // Wait until Tx register empty.
    while(!(SPSR & (1<<SPIF)));
  b2:	0d b4       	in	r0, 0x2d	; 45
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <LCD_writeCommand+0x6>

    SET_SCE_PIN;   	 	//disable LCD
  b8:	28 9a       	sbi	0x05, 0	; 5
  ba:	08 95       	ret

000000bc <LCD_writeData>:
--------------------------------------------------------------------------------------------------*/
// There is no reason to mess with this function
void LCD_writeData ( unsigned char Data ){
	
	//PORTB = _BV(PB0);	// Blink LED to indicate activity
    CLEAR_SCE_PIN;	  	// Enable LCD writing
  bc:	28 98       	cbi	0x05, 0	; 5
	
	SET_DC_PIN;	  		//set LCD in Data mode
  be:	2a 9a       	sbi	0x05, 2	; 5
	
    // Send data to display controller.
    SPDR = Data;
  c0:	8e bd       	out	0x2e, r24	; 46
	
    // Wait until Tx register empty.
    while ( !(SPSR & 0x80) );
  c2:	0d b4       	in	r0, 0x2d	; 45
  c4:	07 fe       	sbrs	r0, 7
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <LCD_writeData+0x6>
	
	// Every time some data is written to the display, X value increases by 1
	screenX+=1;
  c8:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <screenX>
  cc:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <screenX+0x1>
  d0:	01 96       	adiw	r24, 0x01	; 1
	if(screenX>=84){	// If X has reached the end of the screen, continue on Y + 1
  d2:	84 35       	cpi	r24, 0x54	; 84
  d4:	91 05       	cpc	r25, r1
  d6:	2c f4       	brge	.+10     	; 0xe2 <LCD_writeData+0x26>
	
    // Wait until Tx register empty.
    while ( !(SPSR & 0x80) );
	
	// Every time some data is written to the display, X value increases by 1
	screenX+=1;
  d8:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <screenX+0x1>
  dc:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <screenX>
  e0:	15 c0       	rjmp	.+42     	; 0x10c <LCD_writeData+0x50>
	if(screenX>=84){	// If X has reached the end of the screen, continue on Y + 1
		screenX = 0;
  e2:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <screenX+0x1>
  e6:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <screenX>
		screenY+=1;	
  ea:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <__data_end>
  ee:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <__data_end+0x1>
  f2:	01 96       	adiw	r24, 0x01	; 1
		if(screenY>=6)	// If Y has reached the end of the screen, continue top, Y = 0
  f4:	86 30       	cpi	r24, 0x06	; 6
  f6:	91 05       	cpc	r25, r1
  f8:	2c f4       	brge	.+10     	; 0x104 <LCD_writeData+0x48>
	
	// Every time some data is written to the display, X value increases by 1
	screenX+=1;
	if(screenX>=84){	// If X has reached the end of the screen, continue on Y + 1
		screenX = 0;
		screenY+=1;	
  fa:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <__data_end+0x1>
  fe:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <__data_end>
 102:	04 c0       	rjmp	.+8      	; 0x10c <LCD_writeData+0x50>
		if(screenY>=6)	// If Y has reached the end of the screen, continue top, Y = 0
			screenY = 0;
 104:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <__data_end+0x1>
 108:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <__data_end>
	}

    SET_SCE_PIN;   	 		// Disable LCD writing
 10c:	28 9a       	sbi	0x05, 0	; 5
 10e:	08 95       	ret

00000110 <LCD_gotoXY>:
  Argument(s)  :  x - range: 0 to 84
  			   	  y -> range: 0 to 5
  Return value :  None.
--------------------------------------------------------------------------------------------------*/

void LCD_gotoXY ( unsigned char x, unsigned char y ){
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	d8 2f       	mov	r29, r24
 116:	c6 2f       	mov	r28, r22

	//Send command to display with XY values we want to draw at
    LCD_writeCommand (0x80 | x);   //column
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	0e 94 56 00 	call	0xac	; 0xac <LCD_writeCommand>
	LCD_writeCommand (0x40 | y);   //row
 11e:	8c 2f       	mov	r24, r28
 120:	80 64       	ori	r24, 0x40	; 64
 122:	0e 94 56 00 	call	0xac	; 0xac <LCD_writeCommand>
	
	//Update the global XY variables, so we can keep track of them later
	screenX = x;
 126:	8d 2f       	mov	r24, r29
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <screenX+0x1>
 12e:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <screenX>
	screenY = y;
 132:	6c 2f       	mov	r22, r28
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	70 93 e1 02 	sts	0x02E1, r23	; 0x8002e1 <__data_end+0x1>
 13a:	60 93 e0 02 	sts	0x02E0, r22	; 0x8002e0 <__data_end>
}
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <LCD_clear>:
  Description  :  Clears the display
  Argument(s)  :  None.
  Return value :  None.
--------------------------------------------------------------------------------------------------*/

void LCD_clear ( void ){
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 
	LCD_gotoXY (0,0);  	//start with (0,0) position
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 88 00 	call	0x110	; 0x110 <LCD_gotoXY>
 154:	06 e0       	ldi	r16, 0x06	; 6
 156:	10 e0       	ldi	r17, 0x00	; 0
 158:	08 c0       	rjmp	.+16     	; 0x16a <LCD_clear+0x26>

    for(int i=0; i<6; ++i)			//For all pixel banks in height
		for(int j=0; j<84; ++j)	//For all pixels in width
			LCD_writeData( 0x00 );	// Draw a blank pixel
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_writeData>
 160:	21 97       	sbiw	r28, 0x01	; 1
void LCD_clear ( void ){
 
	LCD_gotoXY (0,0);  	//start with (0,0) position

    for(int i=0; i<6; ++i)			//For all pixel banks in height
		for(int j=0; j<84; ++j)	//For all pixels in width
 162:	d9 f7       	brne	.-10     	; 0x15a <LCD_clear+0x16>
 164:	01 50       	subi	r16, 0x01	; 1
 166:	11 09       	sbc	r17, r1

void LCD_clear ( void ){
 
	LCD_gotoXY (0,0);  	//start with (0,0) position

    for(int i=0; i<6; ++i)			//For all pixel banks in height
 168:	19 f0       	breq	.+6      	; 0x170 <LCD_clear+0x2c>
  Description  :  Clears the display
  Argument(s)  :  None.
  Return value :  None.
--------------------------------------------------------------------------------------------------*/

void LCD_clear ( void ){
 16a:	c4 e5       	ldi	r28, 0x54	; 84
 16c:	d0 e0       	ldi	r29, 0x00	; 0
 16e:	f5 cf       	rjmp	.-22     	; 0x15a <LCD_clear+0x16>

    for(int i=0; i<6; ++i)			//For all pixel banks in height
		for(int j=0; j<84; ++j)	//For all pixels in width
			LCD_writeData( 0x00 );	// Draw a blank pixel
   
    LCD_gotoXY (0,0);	//bring the XY position back to (0,0), just in case.
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 88 00 	call	0x110	; 0x110 <LCD_gotoXY>
    
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	08 95       	ret

00000182 <LCD_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	2f ef       	ldi	r18, 0xFF	; 255
 184:	81 ee       	ldi	r24, 0xE1	; 225
 186:	94 e0       	ldi	r25, 0x04	; 4
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <LCD_init+0x6>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_init+0x10>
 192:	00 00       	nop
// Add startup code here
void LCD_init ( void ){
    
	_delay_ms(100);		// Allow some time to let things settle
	
	CLEAR_SCE_PIN;    	// Enable LCD writing
 194:	28 98       	cbi	0x05, 0	; 5
    
	CLEAR_RST_PIN;		// Reset LCD
 196:	29 98       	cbi	0x05, 1	; 5
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	81 ee       	ldi	r24, 0xE1	; 225
 19c:	94 e0       	ldi	r25, 0x04	; 4
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <LCD_init+0x1c>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <LCD_init+0x26>
 1a8:	00 00       	nop
    _delay_ms(100);		// Allow the LCD controller some time to reset
    SET_RST_PIN;		// Disable reset
 1aa:	29 9a       	sbi	0x05, 1	; 5
	
	SET_SCE_PIN;		// Disable LCD writing
 1ac:	28 9a       	sbi	0x05, 0	; 5

    LCD_writeCommand( 0x21 );  // LCD Extended Commands.
 1ae:	81 e2       	ldi	r24, 0x21	; 33
 1b0:	0e 94 56 00 	call	0xac	; 0xac <LCD_writeCommand>
    LCD_writeCommand( 0xBf );  // Set LCD Vop (Contrast).
 1b4:	8f eb       	ldi	r24, 0xBF	; 191
 1b6:	0e 94 56 00 	call	0xac	; 0xac <LCD_writeCommand>
    LCD_writeCommand( 0x04 );  // Set Temp coefficent.
 1ba:	84 e0       	ldi	r24, 0x04	; 4
 1bc:	0e 94 56 00 	call	0xac	; 0xac <LCD_writeCommand>
    LCD_writeCommand( 0x13 );  // LCD bias mode 1:48.
 1c0:	83 e1       	ldi	r24, 0x13	; 19
 1c2:	0e 94 56 00 	call	0xac	; 0xac <LCD_writeCommand>
    LCD_writeCommand( 0x20 );  // LCD Standard Commands, Horizontal addressing mode.
 1c6:	80 e2       	ldi	r24, 0x20	; 32
 1c8:	0e 94 56 00 	call	0xac	; 0xac <LCD_writeCommand>
    LCD_writeCommand( 0x0c );  // LCD in normal mode.
 1cc:	8c e0       	ldi	r24, 0x0C	; 12
 1ce:	0e 94 56 00 	call	0xac	; 0xac <LCD_writeCommand>

    LCD_clear();		// Clear the LCD so it's ready for use
 1d2:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_clear>
 1d6:	08 95       	ret

000001d8 <LCD_drawChar>:
  Description  :  Draws a character to display
  Argument(s)  :  ch -> Character to be drawn
  Return value :  None
--------------------------------------------------------------------------------------------------*/
 
void LCD_drawChar ( unsigned char ch ){
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	c8 2f       	mov	r28, r24

	// Newline = 0x0A in hex, if the char we want to draw is this,
	// we call gotoXY and increase Y by 1
	if(ch == 0x0A){
 1e2:	8a 30       	cpi	r24, 0x0A	; 10
 1e4:	71 f4       	brne	.+28     	; 0x202 <LCD_drawChar+0x2a>
		LCD_gotoXY(0, ++screenY);
 1e6:	60 91 e0 02 	lds	r22, 0x02E0	; 0x8002e0 <__data_end>
 1ea:	70 91 e1 02 	lds	r23, 0x02E1	; 0x8002e1 <__data_end+0x1>
 1ee:	6f 5f       	subi	r22, 0xFF	; 255
 1f0:	7f 4f       	sbci	r23, 0xFF	; 255
 1f2:	70 93 e1 02 	sts	0x02E1, r23	; 0x8002e1 <__data_end+0x1>
 1f6:	60 93 e0 02 	sts	0x02E0, r22	; 0x8002e0 <__data_end>
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	0e 94 88 00 	call	0x110	; 0x110 <LCD_gotoXY>
		return;	// We don't have anything more to do, return function.
 200:	52 c0       	rjmp	.+164    	; 0x2a6 <LCD_drawChar+0xce>
	// Sometimes the character we want to draw is too close to the edge of the screen
	// to be draw normally. To prevent the character from being partly drawn over 2 lines
	// we check if we have enough room so draw the character, and if we don't, we simply
	// draw it on the next line instead
	
	if(84-screenX < 5){	// If there are less than 5 pixels left of this ,
 202:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <screenX>
 206:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <screenX+0x1>
 20a:	64 e5       	ldi	r22, 0x54	; 84
 20c:	70 e0       	ldi	r23, 0x00	; 0
 20e:	68 1b       	sub	r22, r24
 210:	79 0b       	sbc	r23, r25
 212:	65 30       	cpi	r22, 0x05	; 5
 214:	71 05       	cpc	r23, r1
 216:	c4 f5       	brge	.+112    	; 0x288 <LCD_drawChar+0xb0>
 218:	8c 2f       	mov	r24, r28
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	80 97       	sbiw	r24, 0x20	; 32
 21e:	9c 01       	movw	r18, r24
 220:	22 0f       	add	r18, r18
 222:	33 1f       	adc	r19, r19
 224:	22 0f       	add	r18, r18
 226:	33 1f       	adc	r19, r19
 228:	82 0f       	add	r24, r18
 22a:	93 1f       	adc	r25, r19
 22c:	fc 01       	movw	r30, r24
 22e:	e0 50       	subi	r30, 0x00	; 0
 230:	ff 4f       	sbci	r31, 0xFF	; 255
 232:	8b 5f       	subi	r24, 0xFB	; 251
 234:	9e 4f       	sbci	r25, 0xFE	; 254
						// Count how many pixels this character needs
	
		int width = 0;
		for(int j=0; j<5; j++){
			// Do not count skips
			if(font [(ch-32)*5 + j] == 0b10000000)
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	21 91       	ld	r18, Z+
 23c:	20 38       	cpi	r18, 0x80	; 128
 23e:	11 f0       	breq	.+4      	; 0x244 <LCD_drawChar+0x6c>
				continue;
			width++;
 240:	4f 5f       	subi	r20, 0xFF	; 255
 242:	5f 4f       	sbci	r21, 0xFF	; 255
	
	if(84-screenX < 5){	// If there are less than 5 pixels left of this ,
						// Count how many pixels this character needs
	
		int width = 0;
		for(int j=0; j<5; j++){
 244:	e8 17       	cp	r30, r24
 246:	f9 07       	cpc	r31, r25
 248:	c1 f7       	brne	.-16     	; 0x23a <LCD_drawChar+0x62>
			if(font [(ch-32)*5 + j] == 0b10000000)
				continue;
			width++;
		}
		// If the width of this character is over the amount of pixels left on the X axis
		if(width > 84-screenX)
 24a:	64 17       	cp	r22, r20
 24c:	75 07       	cpc	r23, r21
 24e:	e4 f4       	brge	.+56     	; 0x288 <LCD_drawChar+0xb0>
			LCD_gotoXY(0, ++screenY);	// Goto next line
 250:	60 91 e0 02 	lds	r22, 0x02E0	; 0x8002e0 <__data_end>
 254:	70 91 e1 02 	lds	r23, 0x02E1	; 0x8002e1 <__data_end+0x1>
 258:	6f 5f       	subi	r22, 0xFF	; 255
 25a:	7f 4f       	sbci	r23, 0xFF	; 255
 25c:	70 93 e1 02 	sts	0x02E1, r23	; 0x8002e1 <__data_end+0x1>
 260:	60 93 e0 02 	sts	0x02E0, r22	; 0x8002e0 <__data_end>
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 88 00 	call	0x110	; 0x110 <LCD_gotoXY>
 26a:	0e c0       	rjmp	.+28     	; 0x288 <LCD_drawChar+0xb0>
		// Our font do not use the first 32 ASCII characters, so we remove 32 from the character
		// we want to draw, and we get the same character as in out font!
		
		// As some of the characters don't use all 5 pixels, we can make it look nicer by not
		// drawing the empty space. 0b10000000 is the value for not drawing anything in our font, aka "skip"
		if(font [(ch-32)*5 + j] == 0b10000000)
 26c:	f8 01       	movw	r30, r16
 26e:	81 91       	ld	r24, Z+
 270:	8f 01       	movw	r16, r30
 272:	80 38       	cpi	r24, 0x80	; 128
 274:	11 f0       	breq	.+4      	; 0x27a <LCD_drawChar+0xa2>
			continue;
		
		// Remove 32 from the character we want to draw, and then draw is.
		LCD_writeData( font [(ch-32)*5 + j] );
 276:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_writeData>
		// If the width of this character is over the amount of pixels left on the X axis
		if(width > 84-screenX)
			LCD_gotoXY(0, ++screenY);	// Goto next line
	}
	// For 5 pixels (Our font maximum width)
	for(int j=0; j<5; j++){
 27a:	0c 17       	cp	r16, r28
 27c:	1d 07       	cpc	r17, r29
 27e:	b1 f7       	brne	.-20     	; 0x26c <LCD_drawChar+0x94>
		// Remove 32 from the character we want to draw, and then draw is.
		LCD_writeData( font [(ch-32)*5 + j] );
	}
	
	//Draw one pixel of spacing between the character and the next one
	LCD_writeData(0x00);
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_writeData>
 286:	0f c0       	rjmp	.+30     	; 0x2a6 <LCD_drawChar+0xce>
 288:	d0 e0       	ldi	r29, 0x00	; 0
 28a:	a0 97       	sbiw	r28, 0x20	; 32
 28c:	ce 01       	movw	r24, r28
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	c8 0f       	add	r28, r24
 298:	d9 1f       	adc	r29, r25
 29a:	8e 01       	movw	r16, r28
 29c:	00 50       	subi	r16, 0x00	; 0
 29e:	1f 4f       	sbci	r17, 0xFF	; 255
 2a0:	cb 5f       	subi	r28, 0xFB	; 251
 2a2:	de 4f       	sbci	r29, 0xFE	; 254
 2a4:	e3 cf       	rjmp	.-58     	; 0x26c <LCD_drawChar+0x94>
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	1f 91       	pop	r17
 2ac:	0f 91       	pop	r16
 2ae:	08 95       	ret

000002b0 <LCD_print>:


void LCD_print (char *s)
{
 2b0:	0f 93       	push	r16
 2b2:	1f 93       	push	r17
 2b4:	cf 93       	push	r28
 2b6:	fc 01       	movw	r30, r24
	for (uint8_t i=0; s[i]!='\0';  i++)
 2b8:	80 81       	ld	r24, Z
 2ba:	88 23       	and	r24, r24
 2bc:	59 f0       	breq	.+22     	; 0x2d4 <LCD_print+0x24>
 2be:	8f 01       	movw	r16, r30
 2c0:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_drawChar (s[i]);
 2c2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_drawChar>
}


void LCD_print (char *s)
{
	for (uint8_t i=0; s[i]!='\0';  i++)
 2c6:	cf 5f       	subi	r28, 0xFF	; 255
 2c8:	f8 01       	movw	r30, r16
 2ca:	ec 0f       	add	r30, r28
 2cc:	f1 1d       	adc	r31, r1
 2ce:	80 81       	ld	r24, Z
 2d0:	81 11       	cpse	r24, r1
 2d2:	f7 cf       	rjmp	.-18     	; 0x2c2 <LCD_print+0x12>
	{
		LCD_drawChar (s[i]);
	}
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	08 95       	ret

000002dc <radio_write_reg>:
	data2 |= TWIReadNACK();
	TWIStop();
}*/
volatile uint8_t data[26];

void radio_write_reg(uint8_t reg, uint8_t high, uint8_t low){
 2dc:	1f 93       	push	r17
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	18 2f       	mov	r17, r24
 2e4:	d6 2f       	mov	r29, r22
 2e6:	c4 2f       	mov	r28, r20
	uint8_t i;
	TWIStart();
 2e8:	0e 94 0a 02 	call	0x414	; 0x414 <TWIStart>
	TWIWrite(0x22);
 2ec:	82 e2       	ldi	r24, 0x22	; 34
 2ee:	0e 94 17 02 	call	0x42e	; 0x42e <TWIWrite>
	TWIWrite(reg);
 2f2:	81 2f       	mov	r24, r17
 2f4:	0e 94 17 02 	call	0x42e	; 0x42e <TWIWrite>
	TWIWrite(high);
 2f8:	8d 2f       	mov	r24, r29
 2fa:	0e 94 17 02 	call	0x42e	; 0x42e <TWIWrite>
	TWIWrite(low);
 2fe:	8c 2f       	mov	r24, r28
 300:	0e 94 17 02 	call	0x42e	; 0x42e <TWIWrite>
	TWIStop();
 304:	0e 94 13 02 	call	0x426	; 0x426 <TWIStop>
}
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	08 95       	ret

00000310 <radio_read>:
void radio_read(){
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
	uint8_t i;
	TWIStart();
 314:	0e 94 0a 02 	call	0x414	; 0x414 <TWIStart>
	TWIWrite(0x22);
 318:	82 e2       	ldi	r24, 0x22	; 34
 31a:	0e 94 17 02 	call	0x42e	; 0x42e <TWIWrite>
	TWIWrite(2);
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	0e 94 17 02 	call	0x42e	; 0x42e <TWIWrite>
	TWIStop();
 324:	0e 94 13 02 	call	0x426	; 0x426 <TWIStop>

	TWIStart();
 328:	0e 94 0a 02 	call	0x414	; 0x414 <TWIStart>
	TWIWrite(0x23);
 32c:	83 e2       	ldi	r24, 0x23	; 35
 32e:	0e 94 17 02 	call	0x42e	; 0x42e <TWIWrite>
 332:	c0 e0       	ldi	r28, 0x00	; 0
 334:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<12; i++) data [i] = TWIReadACK();
 336:	0e 94 22 02 	call	0x444	; 0x444 <TWIReadACK>
 33a:	fe 01       	movw	r30, r28
 33c:	ed 5f       	subi	r30, 0xFD	; 253
 33e:	fc 4f       	sbci	r31, 0xFC	; 252
 340:	80 83       	st	Z, r24
 342:	21 96       	adiw	r28, 0x01	; 1
 344:	cc 30       	cpi	r28, 0x0C	; 12
 346:	d1 05       	cpc	r29, r1
 348:	b1 f7       	brne	.-20     	; 0x336 <radio_read+0x26>
	data[12] = TWIReadNACK();
 34a:	0e 94 2d 02 	call	0x45a	; 0x45a <TWIReadNACK>
 34e:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <data+0xc>
	TWIStop();
 352:	0e 94 13 02 	call	0x426	; 0x426 <TWIStop>
}
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <main>:
int main(){
	
	 // Enable pins for use
	 DDRB = 0xFF;	// Enable output for the LED
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	84 b9       	out	0x04, r24	; 4
	 //PORTB = _BV(PB0);	// Turn on the LED
	 //DDRC = 0b11111111;	// Enable output for all pins on PORT C (This is where the display is connected)
	 
	 // Enable SPI interface so we can communicate with the display
	 spi_init();
 360:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_init>
	 
	 // Initilize the LCD display
	 LCD_init();
 364:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_init>
	 
	 // When the display is initilized, we can write something to it,
	 // Move to X - 0, Y - 2, and write a message to indicate that everything works
	 // as is should.
	 LCD_gotoXY(2,0);
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	0e 94 88 00 	call	0x110	; 0x110 <LCD_gotoXY>
	 
	 //Write the characters, one by one...
	 
	 LCD_drawChar('f');	//Characters are in single qutoes, so the value of the character is used
 370:	86 e6       	ldi	r24, 0x66	; 102
 372:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_drawChar>
	 LCD_drawChar('o');	//e.g "A" = A, 'A' = 66.
 376:	8f e6       	ldi	r24, 0x6F	; 111
 378:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_drawChar>
	 LCD_drawChar('a');
 37c:	81 e6       	ldi	r24, 0x61	; 97
 37e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_drawChar>
	 LCD_drawChar('m');
 382:	8d e6       	ldi	r24, 0x6D	; 109
 384:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_drawChar>
	 LCD_drawChar('e');
 388:	85 e6       	ldi	r24, 0x65	; 101
 38a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_drawChar>
	 
	 // Of course, it's easier to make an array and write that to the screen
	 LCD_gotoXY(0,1);
 38e:	61 e0       	ldi	r22, 0x01	; 1
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0e 94 88 00 	call	0x110	; 0x110 <LCD_gotoXY>
	 //static const unsigned char display[] = { "MANCARE" };	//In an array like this, you use double quotes.
	 
	 TWIInit();
 396:	0e 94 01 02 	call	0x402	; 0x402 <TWIInit>
	 radio_write_reg(2, 0xc0, 0x03);
 39a:	43 e0       	ldi	r20, 0x03	; 3
 39c:	60 ec       	ldi	r22, 0xC0	; 192
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	0e 94 6e 01 	call	0x2dc	; 0x2dc <radio_write_reg>
	 radio_write_reg(2, 0xc0, 0x0d);
 3a4:	4d e0       	ldi	r20, 0x0D	; 13
 3a6:	60 ec       	ldi	r22, 0xC0	; 192
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	0e 94 6e 01 	call	0x2dc	; 0x2dc <radio_write_reg>
	 uint16_t freq = 921;
	 freq = freq - 870;
	 uint8_t freqH = freq>> 2;
	 uint8_t freqL = (freq & 3) <<6;

	 radio_write_reg(3, freqH ,freqL + 0x10);
 3ae:	40 ed       	ldi	r20, 0xD0	; 208
 3b0:	6c e0       	ldi	r22, 0x0C	; 12
 3b2:	83 e0       	ldi	r24, 0x03	; 3
 3b4:	0e 94 6e 01 	call	0x2dc	; 0x2dc <radio_write_reg>
	 radio_write_reg(5, 0x84, 0xd1);
 3b8:	41 ed       	ldi	r20, 0xD1	; 209
 3ba:	64 e8       	ldi	r22, 0x84	; 132
 3bc:	85 e0       	ldi	r24, 0x05	; 5
 3be:	0e 94 6e 01 	call	0x2dc	; 0x2dc <radio_write_reg>
	 radio_read();
 3c2:	0e 94 88 01 	call	0x310	; 0x310 <radio_read>
		 LCD_drawChar(text[0]);
		 LCD_drawChar(text[1]);										// Draw the character to screen.
	 }
	 LCD_gotoXY(0,4);
	 */
	 sprintf (cfreq, "%.2f", 92.1);
 3c6:	82 e4       	ldi	r24, 0x42	; 66
 3c8:	8f 93       	push	r24
 3ca:	88 eb       	ldi	r24, 0xB8	; 184
 3cc:	8f 93       	push	r24
 3ce:	83 e3       	ldi	r24, 0x33	; 51
 3d0:	8f 93       	push	r24
 3d2:	8f 93       	push	r24
 3d4:	8b ed       	ldi	r24, 0xDB	; 219
 3d6:	92 e0       	ldi	r25, 0x02	; 2
 3d8:	9f 93       	push	r25
 3da:	8f 93       	push	r24
 3dc:	84 ef       	ldi	r24, 0xF4	; 244
 3de:	92 e0       	ldi	r25, 0x02	; 2
 3e0:	9f 93       	push	r25
 3e2:	8f 93       	push	r24
 3e4:	0e 94 38 02 	call	0x470	; 0x470 <sprintf>
	 LCD_print(cfreq);
 3e8:	84 ef       	ldi	r24, 0xF4	; 244
 3ea:	92 e0       	ldi	r25, 0x02	; 2
 3ec:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_print>
 3f0:	8d b7       	in	r24, 0x3d	; 61
 3f2:	9e b7       	in	r25, 0x3e	; 62
 3f4:	08 96       	adiw	r24, 0x08	; 8
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	f8 94       	cli
 3fa:	9e bf       	out	0x3e, r25	; 62
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	8d bf       	out	0x3d, r24	; 61
 400:	ff cf       	rjmp	.-2      	; 0x400 <__LOCK_REGION_LENGTH__>

00000402 <TWIInit>:
 void TWIWriteACK(uint8_t u8data)
 {
	 TWDR = u8data;
	 TWCR = (1<<TWINT)|(1<<TWEN) | (1<<TWEA);
	 while ((TWCR & (1<<TWINT)) == 0);
 }
 402:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 406:	8c e0       	ldi	r24, 0x0C	; 12
 408:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 40c:	84 e0       	ldi	r24, 0x04	; 4
 40e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 412:	08 95       	ret

00000414 <TWIStart>:
 414:	84 ea       	ldi	r24, 0xA4	; 164
 416:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 41a:	ec eb       	ldi	r30, 0xBC	; 188
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	88 23       	and	r24, r24
 422:	ec f7       	brge	.-6      	; 0x41e <TWIStart+0xa>
 424:	08 95       	ret

00000426 <TWIStop>:
 426:	84 e9       	ldi	r24, 0x94	; 148
 428:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 42c:	08 95       	ret

0000042e <TWIWrite>:
 42e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 432:	84 e8       	ldi	r24, 0x84	; 132
 434:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 438:	ec eb       	ldi	r30, 0xBC	; 188
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	88 23       	and	r24, r24
 440:	ec f7       	brge	.-6      	; 0x43c <TWIWrite+0xe>
 442:	08 95       	ret

00000444 <TWIReadACK>:


 uint8_t TWIReadACK(void)
 {
	 TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 444:	84 ec       	ldi	r24, 0xC4	; 196
 446:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	 while ((TWCR & (1<<TWINT)) == 0);
 44a:	ec eb       	ldi	r30, 0xBC	; 188
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	88 23       	and	r24, r24
 452:	ec f7       	brge	.-6      	; 0x44e <TWIReadACK+0xa>
	 return TWDR;
 454:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 }
 458:	08 95       	ret

0000045a <TWIReadNACK>:
 //read byte with NACK
uint8_t TWIReadNACK(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN);
 45a:	84 e8       	ldi	r24, 0x84	; 132
 45c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while ((TWCR & (1<<TWINT)) == 0);
 460:	ec eb       	ldi	r30, 0xBC	; 188
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	88 23       	and	r24, r24
 468:	ec f7       	brge	.-6      	; 0x464 <TWIReadNACK+0xa>
	return TWDR;
 46a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 46e:	08 95       	ret

00000470 <sprintf>:
 470:	ae e0       	ldi	r26, 0x0E	; 14
 472:	b0 e0       	ldi	r27, 0x00	; 0
 474:	ee e3       	ldi	r30, 0x3E	; 62
 476:	f2 e0       	ldi	r31, 0x02	; 2
 478:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__prologue_saves__+0x1c>
 47c:	0d 89       	ldd	r16, Y+21	; 0x15
 47e:	1e 89       	ldd	r17, Y+22	; 0x16
 480:	86 e0       	ldi	r24, 0x06	; 6
 482:	8c 83       	std	Y+4, r24	; 0x04
 484:	1a 83       	std	Y+2, r17	; 0x02
 486:	09 83       	std	Y+1, r16	; 0x01
 488:	8f ef       	ldi	r24, 0xFF	; 255
 48a:	9f e7       	ldi	r25, 0x7F	; 127
 48c:	9e 83       	std	Y+6, r25	; 0x06
 48e:	8d 83       	std	Y+5, r24	; 0x05
 490:	ae 01       	movw	r20, r28
 492:	47 5e       	subi	r20, 0xE7	; 231
 494:	5f 4f       	sbci	r21, 0xFF	; 255
 496:	6f 89       	ldd	r22, Y+23	; 0x17
 498:	78 8d       	ldd	r23, Y+24	; 0x18
 49a:	ce 01       	movw	r24, r28
 49c:	01 96       	adiw	r24, 0x01	; 1
 49e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <vfprintf>
 4a2:	ef 81       	ldd	r30, Y+7	; 0x07
 4a4:	f8 85       	ldd	r31, Y+8	; 0x08
 4a6:	e0 0f       	add	r30, r16
 4a8:	f1 1f       	adc	r31, r17
 4aa:	10 82       	st	Z, r1
 4ac:	2e 96       	adiw	r28, 0x0e	; 14
 4ae:	e4 e0       	ldi	r30, 0x04	; 4
 4b0:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__epilogue_restores__+0x1c>

000004b4 <vfprintf>:
 4b4:	ab e0       	ldi	r26, 0x0B	; 11
 4b6:	b0 e0       	ldi	r27, 0x00	; 0
 4b8:	e0 e6       	ldi	r30, 0x60	; 96
 4ba:	f2 e0       	ldi	r31, 0x02	; 2
 4bc:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__prologue_saves__>
 4c0:	6c 01       	movw	r12, r24
 4c2:	7b 01       	movw	r14, r22
 4c4:	8a 01       	movw	r16, r20
 4c6:	fc 01       	movw	r30, r24
 4c8:	17 82       	std	Z+7, r1	; 0x07
 4ca:	16 82       	std	Z+6, r1	; 0x06
 4cc:	83 81       	ldd	r24, Z+3	; 0x03
 4ce:	81 ff       	sbrs	r24, 1
 4d0:	cc c1       	rjmp	.+920    	; 0x86a <vfprintf+0x3b6>
 4d2:	ce 01       	movw	r24, r28
 4d4:	01 96       	adiw	r24, 0x01	; 1
 4d6:	3c 01       	movw	r6, r24
 4d8:	f6 01       	movw	r30, r12
 4da:	93 81       	ldd	r25, Z+3	; 0x03
 4dc:	f7 01       	movw	r30, r14
 4de:	93 fd       	sbrc	r25, 3
 4e0:	85 91       	lpm	r24, Z+
 4e2:	93 ff       	sbrs	r25, 3
 4e4:	81 91       	ld	r24, Z+
 4e6:	7f 01       	movw	r14, r30
 4e8:	88 23       	and	r24, r24
 4ea:	09 f4       	brne	.+2      	; 0x4ee <vfprintf+0x3a>
 4ec:	ba c1       	rjmp	.+884    	; 0x862 <vfprintf+0x3ae>
 4ee:	85 32       	cpi	r24, 0x25	; 37
 4f0:	39 f4       	brne	.+14     	; 0x500 <vfprintf+0x4c>
 4f2:	93 fd       	sbrc	r25, 3
 4f4:	85 91       	lpm	r24, Z+
 4f6:	93 ff       	sbrs	r25, 3
 4f8:	81 91       	ld	r24, Z+
 4fa:	7f 01       	movw	r14, r30
 4fc:	85 32       	cpi	r24, 0x25	; 37
 4fe:	29 f4       	brne	.+10     	; 0x50a <vfprintf+0x56>
 500:	b6 01       	movw	r22, r12
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 51 04 	call	0x8a2	; 0x8a2 <fputc>
 508:	e7 cf       	rjmp	.-50     	; 0x4d8 <vfprintf+0x24>
 50a:	91 2c       	mov	r9, r1
 50c:	21 2c       	mov	r2, r1
 50e:	31 2c       	mov	r3, r1
 510:	ff e1       	ldi	r31, 0x1F	; 31
 512:	f3 15       	cp	r31, r3
 514:	d8 f0       	brcs	.+54     	; 0x54c <vfprintf+0x98>
 516:	8b 32       	cpi	r24, 0x2B	; 43
 518:	79 f0       	breq	.+30     	; 0x538 <vfprintf+0x84>
 51a:	38 f4       	brcc	.+14     	; 0x52a <vfprintf+0x76>
 51c:	80 32       	cpi	r24, 0x20	; 32
 51e:	79 f0       	breq	.+30     	; 0x53e <vfprintf+0x8a>
 520:	83 32       	cpi	r24, 0x23	; 35
 522:	a1 f4       	brne	.+40     	; 0x54c <vfprintf+0x98>
 524:	23 2d       	mov	r18, r3
 526:	20 61       	ori	r18, 0x10	; 16
 528:	1d c0       	rjmp	.+58     	; 0x564 <vfprintf+0xb0>
 52a:	8d 32       	cpi	r24, 0x2D	; 45
 52c:	61 f0       	breq	.+24     	; 0x546 <vfprintf+0x92>
 52e:	80 33       	cpi	r24, 0x30	; 48
 530:	69 f4       	brne	.+26     	; 0x54c <vfprintf+0x98>
 532:	23 2d       	mov	r18, r3
 534:	21 60       	ori	r18, 0x01	; 1
 536:	16 c0       	rjmp	.+44     	; 0x564 <vfprintf+0xb0>
 538:	83 2d       	mov	r24, r3
 53a:	82 60       	ori	r24, 0x02	; 2
 53c:	38 2e       	mov	r3, r24
 53e:	e3 2d       	mov	r30, r3
 540:	e4 60       	ori	r30, 0x04	; 4
 542:	3e 2e       	mov	r3, r30
 544:	2a c0       	rjmp	.+84     	; 0x59a <vfprintf+0xe6>
 546:	f3 2d       	mov	r31, r3
 548:	f8 60       	ori	r31, 0x08	; 8
 54a:	1d c0       	rjmp	.+58     	; 0x586 <vfprintf+0xd2>
 54c:	37 fc       	sbrc	r3, 7
 54e:	2d c0       	rjmp	.+90     	; 0x5aa <vfprintf+0xf6>
 550:	20 ed       	ldi	r18, 0xD0	; 208
 552:	28 0f       	add	r18, r24
 554:	2a 30       	cpi	r18, 0x0A	; 10
 556:	40 f0       	brcs	.+16     	; 0x568 <vfprintf+0xb4>
 558:	8e 32       	cpi	r24, 0x2E	; 46
 55a:	b9 f4       	brne	.+46     	; 0x58a <vfprintf+0xd6>
 55c:	36 fc       	sbrc	r3, 6
 55e:	81 c1       	rjmp	.+770    	; 0x862 <vfprintf+0x3ae>
 560:	23 2d       	mov	r18, r3
 562:	20 64       	ori	r18, 0x40	; 64
 564:	32 2e       	mov	r3, r18
 566:	19 c0       	rjmp	.+50     	; 0x59a <vfprintf+0xe6>
 568:	36 fe       	sbrs	r3, 6
 56a:	06 c0       	rjmp	.+12     	; 0x578 <vfprintf+0xc4>
 56c:	8a e0       	ldi	r24, 0x0A	; 10
 56e:	98 9e       	mul	r9, r24
 570:	20 0d       	add	r18, r0
 572:	11 24       	eor	r1, r1
 574:	92 2e       	mov	r9, r18
 576:	11 c0       	rjmp	.+34     	; 0x59a <vfprintf+0xe6>
 578:	ea e0       	ldi	r30, 0x0A	; 10
 57a:	2e 9e       	mul	r2, r30
 57c:	20 0d       	add	r18, r0
 57e:	11 24       	eor	r1, r1
 580:	22 2e       	mov	r2, r18
 582:	f3 2d       	mov	r31, r3
 584:	f0 62       	ori	r31, 0x20	; 32
 586:	3f 2e       	mov	r3, r31
 588:	08 c0       	rjmp	.+16     	; 0x59a <vfprintf+0xe6>
 58a:	8c 36       	cpi	r24, 0x6C	; 108
 58c:	21 f4       	brne	.+8      	; 0x596 <vfprintf+0xe2>
 58e:	83 2d       	mov	r24, r3
 590:	80 68       	ori	r24, 0x80	; 128
 592:	38 2e       	mov	r3, r24
 594:	02 c0       	rjmp	.+4      	; 0x59a <vfprintf+0xe6>
 596:	88 36       	cpi	r24, 0x68	; 104
 598:	41 f4       	brne	.+16     	; 0x5aa <vfprintf+0xf6>
 59a:	f7 01       	movw	r30, r14
 59c:	93 fd       	sbrc	r25, 3
 59e:	85 91       	lpm	r24, Z+
 5a0:	93 ff       	sbrs	r25, 3
 5a2:	81 91       	ld	r24, Z+
 5a4:	7f 01       	movw	r14, r30
 5a6:	81 11       	cpse	r24, r1
 5a8:	b3 cf       	rjmp	.-154    	; 0x510 <vfprintf+0x5c>
 5aa:	98 2f       	mov	r25, r24
 5ac:	9f 7d       	andi	r25, 0xDF	; 223
 5ae:	95 54       	subi	r25, 0x45	; 69
 5b0:	93 30       	cpi	r25, 0x03	; 3
 5b2:	28 f4       	brcc	.+10     	; 0x5be <vfprintf+0x10a>
 5b4:	0c 5f       	subi	r16, 0xFC	; 252
 5b6:	1f 4f       	sbci	r17, 0xFF	; 255
 5b8:	9f e3       	ldi	r25, 0x3F	; 63
 5ba:	99 83       	std	Y+1, r25	; 0x01
 5bc:	0d c0       	rjmp	.+26     	; 0x5d8 <vfprintf+0x124>
 5be:	83 36       	cpi	r24, 0x63	; 99
 5c0:	31 f0       	breq	.+12     	; 0x5ce <vfprintf+0x11a>
 5c2:	83 37       	cpi	r24, 0x73	; 115
 5c4:	71 f0       	breq	.+28     	; 0x5e2 <vfprintf+0x12e>
 5c6:	83 35       	cpi	r24, 0x53	; 83
 5c8:	09 f0       	breq	.+2      	; 0x5cc <vfprintf+0x118>
 5ca:	59 c0       	rjmp	.+178    	; 0x67e <vfprintf+0x1ca>
 5cc:	21 c0       	rjmp	.+66     	; 0x610 <vfprintf+0x15c>
 5ce:	f8 01       	movw	r30, r16
 5d0:	80 81       	ld	r24, Z
 5d2:	89 83       	std	Y+1, r24	; 0x01
 5d4:	0e 5f       	subi	r16, 0xFE	; 254
 5d6:	1f 4f       	sbci	r17, 0xFF	; 255
 5d8:	88 24       	eor	r8, r8
 5da:	83 94       	inc	r8
 5dc:	91 2c       	mov	r9, r1
 5de:	53 01       	movw	r10, r6
 5e0:	13 c0       	rjmp	.+38     	; 0x608 <vfprintf+0x154>
 5e2:	28 01       	movw	r4, r16
 5e4:	f2 e0       	ldi	r31, 0x02	; 2
 5e6:	4f 0e       	add	r4, r31
 5e8:	51 1c       	adc	r5, r1
 5ea:	f8 01       	movw	r30, r16
 5ec:	a0 80       	ld	r10, Z
 5ee:	b1 80       	ldd	r11, Z+1	; 0x01
 5f0:	36 fe       	sbrs	r3, 6
 5f2:	03 c0       	rjmp	.+6      	; 0x5fa <vfprintf+0x146>
 5f4:	69 2d       	mov	r22, r9
 5f6:	70 e0       	ldi	r23, 0x00	; 0
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <vfprintf+0x14a>
 5fa:	6f ef       	ldi	r22, 0xFF	; 255
 5fc:	7f ef       	ldi	r23, 0xFF	; 255
 5fe:	c5 01       	movw	r24, r10
 600:	0e 94 46 04 	call	0x88c	; 0x88c <strnlen>
 604:	4c 01       	movw	r8, r24
 606:	82 01       	movw	r16, r4
 608:	f3 2d       	mov	r31, r3
 60a:	ff 77       	andi	r31, 0x7F	; 127
 60c:	3f 2e       	mov	r3, r31
 60e:	16 c0       	rjmp	.+44     	; 0x63c <vfprintf+0x188>
 610:	28 01       	movw	r4, r16
 612:	22 e0       	ldi	r18, 0x02	; 2
 614:	42 0e       	add	r4, r18
 616:	51 1c       	adc	r5, r1
 618:	f8 01       	movw	r30, r16
 61a:	a0 80       	ld	r10, Z
 61c:	b1 80       	ldd	r11, Z+1	; 0x01
 61e:	36 fe       	sbrs	r3, 6
 620:	03 c0       	rjmp	.+6      	; 0x628 <vfprintf+0x174>
 622:	69 2d       	mov	r22, r9
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	02 c0       	rjmp	.+4      	; 0x62c <vfprintf+0x178>
 628:	6f ef       	ldi	r22, 0xFF	; 255
 62a:	7f ef       	ldi	r23, 0xFF	; 255
 62c:	c5 01       	movw	r24, r10
 62e:	0e 94 3b 04 	call	0x876	; 0x876 <strnlen_P>
 632:	4c 01       	movw	r8, r24
 634:	f3 2d       	mov	r31, r3
 636:	f0 68       	ori	r31, 0x80	; 128
 638:	3f 2e       	mov	r3, r31
 63a:	82 01       	movw	r16, r4
 63c:	33 fc       	sbrc	r3, 3
 63e:	1b c0       	rjmp	.+54     	; 0x676 <vfprintf+0x1c2>
 640:	82 2d       	mov	r24, r2
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	88 16       	cp	r8, r24
 646:	99 06       	cpc	r9, r25
 648:	b0 f4       	brcc	.+44     	; 0x676 <vfprintf+0x1c2>
 64a:	b6 01       	movw	r22, r12
 64c:	80 e2       	ldi	r24, 0x20	; 32
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	0e 94 51 04 	call	0x8a2	; 0x8a2 <fputc>
 654:	2a 94       	dec	r2
 656:	f4 cf       	rjmp	.-24     	; 0x640 <vfprintf+0x18c>
 658:	f5 01       	movw	r30, r10
 65a:	37 fc       	sbrc	r3, 7
 65c:	85 91       	lpm	r24, Z+
 65e:	37 fe       	sbrs	r3, 7
 660:	81 91       	ld	r24, Z+
 662:	5f 01       	movw	r10, r30
 664:	b6 01       	movw	r22, r12
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 51 04 	call	0x8a2	; 0x8a2 <fputc>
 66c:	21 10       	cpse	r2, r1
 66e:	2a 94       	dec	r2
 670:	21 e0       	ldi	r18, 0x01	; 1
 672:	82 1a       	sub	r8, r18
 674:	91 08       	sbc	r9, r1
 676:	81 14       	cp	r8, r1
 678:	91 04       	cpc	r9, r1
 67a:	71 f7       	brne	.-36     	; 0x658 <vfprintf+0x1a4>
 67c:	e8 c0       	rjmp	.+464    	; 0x84e <vfprintf+0x39a>
 67e:	84 36       	cpi	r24, 0x64	; 100
 680:	11 f0       	breq	.+4      	; 0x686 <vfprintf+0x1d2>
 682:	89 36       	cpi	r24, 0x69	; 105
 684:	41 f5       	brne	.+80     	; 0x6d6 <vfprintf+0x222>
 686:	f8 01       	movw	r30, r16
 688:	37 fe       	sbrs	r3, 7
 68a:	07 c0       	rjmp	.+14     	; 0x69a <vfprintf+0x1e6>
 68c:	60 81       	ld	r22, Z
 68e:	71 81       	ldd	r23, Z+1	; 0x01
 690:	82 81       	ldd	r24, Z+2	; 0x02
 692:	93 81       	ldd	r25, Z+3	; 0x03
 694:	0c 5f       	subi	r16, 0xFC	; 252
 696:	1f 4f       	sbci	r17, 0xFF	; 255
 698:	08 c0       	rjmp	.+16     	; 0x6aa <vfprintf+0x1f6>
 69a:	60 81       	ld	r22, Z
 69c:	71 81       	ldd	r23, Z+1	; 0x01
 69e:	07 2e       	mov	r0, r23
 6a0:	00 0c       	add	r0, r0
 6a2:	88 0b       	sbc	r24, r24
 6a4:	99 0b       	sbc	r25, r25
 6a6:	0e 5f       	subi	r16, 0xFE	; 254
 6a8:	1f 4f       	sbci	r17, 0xFF	; 255
 6aa:	f3 2d       	mov	r31, r3
 6ac:	ff 76       	andi	r31, 0x6F	; 111
 6ae:	3f 2e       	mov	r3, r31
 6b0:	97 ff       	sbrs	r25, 7
 6b2:	09 c0       	rjmp	.+18     	; 0x6c6 <vfprintf+0x212>
 6b4:	90 95       	com	r25
 6b6:	80 95       	com	r24
 6b8:	70 95       	com	r23
 6ba:	61 95       	neg	r22
 6bc:	7f 4f       	sbci	r23, 0xFF	; 255
 6be:	8f 4f       	sbci	r24, 0xFF	; 255
 6c0:	9f 4f       	sbci	r25, 0xFF	; 255
 6c2:	f0 68       	ori	r31, 0x80	; 128
 6c4:	3f 2e       	mov	r3, r31
 6c6:	2a e0       	ldi	r18, 0x0A	; 10
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	a3 01       	movw	r20, r6
 6cc:	0e 94 8d 04 	call	0x91a	; 0x91a <__ultoa_invert>
 6d0:	88 2e       	mov	r8, r24
 6d2:	86 18       	sub	r8, r6
 6d4:	45 c0       	rjmp	.+138    	; 0x760 <vfprintf+0x2ac>
 6d6:	85 37       	cpi	r24, 0x75	; 117
 6d8:	31 f4       	brne	.+12     	; 0x6e6 <vfprintf+0x232>
 6da:	23 2d       	mov	r18, r3
 6dc:	2f 7e       	andi	r18, 0xEF	; 239
 6de:	b2 2e       	mov	r11, r18
 6e0:	2a e0       	ldi	r18, 0x0A	; 10
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	25 c0       	rjmp	.+74     	; 0x730 <vfprintf+0x27c>
 6e6:	93 2d       	mov	r25, r3
 6e8:	99 7f       	andi	r25, 0xF9	; 249
 6ea:	b9 2e       	mov	r11, r25
 6ec:	8f 36       	cpi	r24, 0x6F	; 111
 6ee:	c1 f0       	breq	.+48     	; 0x720 <vfprintf+0x26c>
 6f0:	18 f4       	brcc	.+6      	; 0x6f8 <vfprintf+0x244>
 6f2:	88 35       	cpi	r24, 0x58	; 88
 6f4:	79 f0       	breq	.+30     	; 0x714 <vfprintf+0x260>
 6f6:	b5 c0       	rjmp	.+362    	; 0x862 <vfprintf+0x3ae>
 6f8:	80 37       	cpi	r24, 0x70	; 112
 6fa:	19 f0       	breq	.+6      	; 0x702 <vfprintf+0x24e>
 6fc:	88 37       	cpi	r24, 0x78	; 120
 6fe:	21 f0       	breq	.+8      	; 0x708 <vfprintf+0x254>
 700:	b0 c0       	rjmp	.+352    	; 0x862 <vfprintf+0x3ae>
 702:	e9 2f       	mov	r30, r25
 704:	e0 61       	ori	r30, 0x10	; 16
 706:	be 2e       	mov	r11, r30
 708:	b4 fe       	sbrs	r11, 4
 70a:	0d c0       	rjmp	.+26     	; 0x726 <vfprintf+0x272>
 70c:	fb 2d       	mov	r31, r11
 70e:	f4 60       	ori	r31, 0x04	; 4
 710:	bf 2e       	mov	r11, r31
 712:	09 c0       	rjmp	.+18     	; 0x726 <vfprintf+0x272>
 714:	34 fe       	sbrs	r3, 4
 716:	0a c0       	rjmp	.+20     	; 0x72c <vfprintf+0x278>
 718:	29 2f       	mov	r18, r25
 71a:	26 60       	ori	r18, 0x06	; 6
 71c:	b2 2e       	mov	r11, r18
 71e:	06 c0       	rjmp	.+12     	; 0x72c <vfprintf+0x278>
 720:	28 e0       	ldi	r18, 0x08	; 8
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	05 c0       	rjmp	.+10     	; 0x730 <vfprintf+0x27c>
 726:	20 e1       	ldi	r18, 0x10	; 16
 728:	30 e0       	ldi	r19, 0x00	; 0
 72a:	02 c0       	rjmp	.+4      	; 0x730 <vfprintf+0x27c>
 72c:	20 e1       	ldi	r18, 0x10	; 16
 72e:	32 e0       	ldi	r19, 0x02	; 2
 730:	f8 01       	movw	r30, r16
 732:	b7 fe       	sbrs	r11, 7
 734:	07 c0       	rjmp	.+14     	; 0x744 <vfprintf+0x290>
 736:	60 81       	ld	r22, Z
 738:	71 81       	ldd	r23, Z+1	; 0x01
 73a:	82 81       	ldd	r24, Z+2	; 0x02
 73c:	93 81       	ldd	r25, Z+3	; 0x03
 73e:	0c 5f       	subi	r16, 0xFC	; 252
 740:	1f 4f       	sbci	r17, 0xFF	; 255
 742:	06 c0       	rjmp	.+12     	; 0x750 <vfprintf+0x29c>
 744:	60 81       	ld	r22, Z
 746:	71 81       	ldd	r23, Z+1	; 0x01
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	0e 5f       	subi	r16, 0xFE	; 254
 74e:	1f 4f       	sbci	r17, 0xFF	; 255
 750:	a3 01       	movw	r20, r6
 752:	0e 94 8d 04 	call	0x91a	; 0x91a <__ultoa_invert>
 756:	88 2e       	mov	r8, r24
 758:	86 18       	sub	r8, r6
 75a:	fb 2d       	mov	r31, r11
 75c:	ff 77       	andi	r31, 0x7F	; 127
 75e:	3f 2e       	mov	r3, r31
 760:	36 fe       	sbrs	r3, 6
 762:	0d c0       	rjmp	.+26     	; 0x77e <vfprintf+0x2ca>
 764:	23 2d       	mov	r18, r3
 766:	2e 7f       	andi	r18, 0xFE	; 254
 768:	a2 2e       	mov	r10, r18
 76a:	89 14       	cp	r8, r9
 76c:	58 f4       	brcc	.+22     	; 0x784 <vfprintf+0x2d0>
 76e:	34 fe       	sbrs	r3, 4
 770:	0b c0       	rjmp	.+22     	; 0x788 <vfprintf+0x2d4>
 772:	32 fc       	sbrc	r3, 2
 774:	09 c0       	rjmp	.+18     	; 0x788 <vfprintf+0x2d4>
 776:	83 2d       	mov	r24, r3
 778:	8e 7e       	andi	r24, 0xEE	; 238
 77a:	a8 2e       	mov	r10, r24
 77c:	05 c0       	rjmp	.+10     	; 0x788 <vfprintf+0x2d4>
 77e:	b8 2c       	mov	r11, r8
 780:	a3 2c       	mov	r10, r3
 782:	03 c0       	rjmp	.+6      	; 0x78a <vfprintf+0x2d6>
 784:	b8 2c       	mov	r11, r8
 786:	01 c0       	rjmp	.+2      	; 0x78a <vfprintf+0x2d6>
 788:	b9 2c       	mov	r11, r9
 78a:	a4 fe       	sbrs	r10, 4
 78c:	0f c0       	rjmp	.+30     	; 0x7ac <vfprintf+0x2f8>
 78e:	fe 01       	movw	r30, r28
 790:	e8 0d       	add	r30, r8
 792:	f1 1d       	adc	r31, r1
 794:	80 81       	ld	r24, Z
 796:	80 33       	cpi	r24, 0x30	; 48
 798:	21 f4       	brne	.+8      	; 0x7a2 <vfprintf+0x2ee>
 79a:	9a 2d       	mov	r25, r10
 79c:	99 7e       	andi	r25, 0xE9	; 233
 79e:	a9 2e       	mov	r10, r25
 7a0:	09 c0       	rjmp	.+18     	; 0x7b4 <vfprintf+0x300>
 7a2:	a2 fe       	sbrs	r10, 2
 7a4:	06 c0       	rjmp	.+12     	; 0x7b2 <vfprintf+0x2fe>
 7a6:	b3 94       	inc	r11
 7a8:	b3 94       	inc	r11
 7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <vfprintf+0x300>
 7ac:	8a 2d       	mov	r24, r10
 7ae:	86 78       	andi	r24, 0x86	; 134
 7b0:	09 f0       	breq	.+2      	; 0x7b4 <vfprintf+0x300>
 7b2:	b3 94       	inc	r11
 7b4:	a3 fc       	sbrc	r10, 3
 7b6:	11 c0       	rjmp	.+34     	; 0x7da <vfprintf+0x326>
 7b8:	a0 fe       	sbrs	r10, 0
 7ba:	06 c0       	rjmp	.+12     	; 0x7c8 <vfprintf+0x314>
 7bc:	b2 14       	cp	r11, r2
 7be:	88 f4       	brcc	.+34     	; 0x7e2 <vfprintf+0x32e>
 7c0:	28 0c       	add	r2, r8
 7c2:	92 2c       	mov	r9, r2
 7c4:	9b 18       	sub	r9, r11
 7c6:	0e c0       	rjmp	.+28     	; 0x7e4 <vfprintf+0x330>
 7c8:	b2 14       	cp	r11, r2
 7ca:	60 f4       	brcc	.+24     	; 0x7e4 <vfprintf+0x330>
 7cc:	b6 01       	movw	r22, r12
 7ce:	80 e2       	ldi	r24, 0x20	; 32
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	0e 94 51 04 	call	0x8a2	; 0x8a2 <fputc>
 7d6:	b3 94       	inc	r11
 7d8:	f7 cf       	rjmp	.-18     	; 0x7c8 <vfprintf+0x314>
 7da:	b2 14       	cp	r11, r2
 7dc:	18 f4       	brcc	.+6      	; 0x7e4 <vfprintf+0x330>
 7de:	2b 18       	sub	r2, r11
 7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <vfprintf+0x332>
 7e2:	98 2c       	mov	r9, r8
 7e4:	21 2c       	mov	r2, r1
 7e6:	a4 fe       	sbrs	r10, 4
 7e8:	10 c0       	rjmp	.+32     	; 0x80a <vfprintf+0x356>
 7ea:	b6 01       	movw	r22, r12
 7ec:	80 e3       	ldi	r24, 0x30	; 48
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	0e 94 51 04 	call	0x8a2	; 0x8a2 <fputc>
 7f4:	a2 fe       	sbrs	r10, 2
 7f6:	17 c0       	rjmp	.+46     	; 0x826 <vfprintf+0x372>
 7f8:	a1 fc       	sbrc	r10, 1
 7fa:	03 c0       	rjmp	.+6      	; 0x802 <vfprintf+0x34e>
 7fc:	88 e7       	ldi	r24, 0x78	; 120
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	02 c0       	rjmp	.+4      	; 0x806 <vfprintf+0x352>
 802:	88 e5       	ldi	r24, 0x58	; 88
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	b6 01       	movw	r22, r12
 808:	0c c0       	rjmp	.+24     	; 0x822 <vfprintf+0x36e>
 80a:	8a 2d       	mov	r24, r10
 80c:	86 78       	andi	r24, 0x86	; 134
 80e:	59 f0       	breq	.+22     	; 0x826 <vfprintf+0x372>
 810:	a1 fe       	sbrs	r10, 1
 812:	02 c0       	rjmp	.+4      	; 0x818 <vfprintf+0x364>
 814:	8b e2       	ldi	r24, 0x2B	; 43
 816:	01 c0       	rjmp	.+2      	; 0x81a <vfprintf+0x366>
 818:	80 e2       	ldi	r24, 0x20	; 32
 81a:	a7 fc       	sbrc	r10, 7
 81c:	8d e2       	ldi	r24, 0x2D	; 45
 81e:	b6 01       	movw	r22, r12
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	0e 94 51 04 	call	0x8a2	; 0x8a2 <fputc>
 826:	89 14       	cp	r8, r9
 828:	38 f4       	brcc	.+14     	; 0x838 <vfprintf+0x384>
 82a:	b6 01       	movw	r22, r12
 82c:	80 e3       	ldi	r24, 0x30	; 48
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	0e 94 51 04 	call	0x8a2	; 0x8a2 <fputc>
 834:	9a 94       	dec	r9
 836:	f7 cf       	rjmp	.-18     	; 0x826 <vfprintf+0x372>
 838:	8a 94       	dec	r8
 83a:	f3 01       	movw	r30, r6
 83c:	e8 0d       	add	r30, r8
 83e:	f1 1d       	adc	r31, r1
 840:	80 81       	ld	r24, Z
 842:	b6 01       	movw	r22, r12
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	0e 94 51 04 	call	0x8a2	; 0x8a2 <fputc>
 84a:	81 10       	cpse	r8, r1
 84c:	f5 cf       	rjmp	.-22     	; 0x838 <vfprintf+0x384>
 84e:	22 20       	and	r2, r2
 850:	09 f4       	brne	.+2      	; 0x854 <vfprintf+0x3a0>
 852:	42 ce       	rjmp	.-892    	; 0x4d8 <vfprintf+0x24>
 854:	b6 01       	movw	r22, r12
 856:	80 e2       	ldi	r24, 0x20	; 32
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <fputc>
 85e:	2a 94       	dec	r2
 860:	f6 cf       	rjmp	.-20     	; 0x84e <vfprintf+0x39a>
 862:	f6 01       	movw	r30, r12
 864:	86 81       	ldd	r24, Z+6	; 0x06
 866:	97 81       	ldd	r25, Z+7	; 0x07
 868:	02 c0       	rjmp	.+4      	; 0x86e <vfprintf+0x3ba>
 86a:	8f ef       	ldi	r24, 0xFF	; 255
 86c:	9f ef       	ldi	r25, 0xFF	; 255
 86e:	2b 96       	adiw	r28, 0x0b	; 11
 870:	e2 e1       	ldi	r30, 0x12	; 18
 872:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__epilogue_restores__>

00000876 <strnlen_P>:
 876:	fc 01       	movw	r30, r24
 878:	05 90       	lpm	r0, Z+
 87a:	61 50       	subi	r22, 0x01	; 1
 87c:	70 40       	sbci	r23, 0x00	; 0
 87e:	01 10       	cpse	r0, r1
 880:	d8 f7       	brcc	.-10     	; 0x878 <strnlen_P+0x2>
 882:	80 95       	com	r24
 884:	90 95       	com	r25
 886:	8e 0f       	add	r24, r30
 888:	9f 1f       	adc	r25, r31
 88a:	08 95       	ret

0000088c <strnlen>:
 88c:	fc 01       	movw	r30, r24
 88e:	61 50       	subi	r22, 0x01	; 1
 890:	70 40       	sbci	r23, 0x00	; 0
 892:	01 90       	ld	r0, Z+
 894:	01 10       	cpse	r0, r1
 896:	d8 f7       	brcc	.-10     	; 0x88e <strnlen+0x2>
 898:	80 95       	com	r24
 89a:	90 95       	com	r25
 89c:	8e 0f       	add	r24, r30
 89e:	9f 1f       	adc	r25, r31
 8a0:	08 95       	ret

000008a2 <fputc>:
 8a2:	0f 93       	push	r16
 8a4:	1f 93       	push	r17
 8a6:	cf 93       	push	r28
 8a8:	df 93       	push	r29
 8aa:	fb 01       	movw	r30, r22
 8ac:	23 81       	ldd	r18, Z+3	; 0x03
 8ae:	21 fd       	sbrc	r18, 1
 8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <fputc+0x16>
 8b2:	8f ef       	ldi	r24, 0xFF	; 255
 8b4:	9f ef       	ldi	r25, 0xFF	; 255
 8b6:	2c c0       	rjmp	.+88     	; 0x910 <__stack+0x11>
 8b8:	22 ff       	sbrs	r18, 2
 8ba:	16 c0       	rjmp	.+44     	; 0x8e8 <fputc+0x46>
 8bc:	46 81       	ldd	r20, Z+6	; 0x06
 8be:	57 81       	ldd	r21, Z+7	; 0x07
 8c0:	24 81       	ldd	r18, Z+4	; 0x04
 8c2:	35 81       	ldd	r19, Z+5	; 0x05
 8c4:	42 17       	cp	r20, r18
 8c6:	53 07       	cpc	r21, r19
 8c8:	44 f4       	brge	.+16     	; 0x8da <fputc+0x38>
 8ca:	a0 81       	ld	r26, Z
 8cc:	b1 81       	ldd	r27, Z+1	; 0x01
 8ce:	9d 01       	movw	r18, r26
 8d0:	2f 5f       	subi	r18, 0xFF	; 255
 8d2:	3f 4f       	sbci	r19, 0xFF	; 255
 8d4:	31 83       	std	Z+1, r19	; 0x01
 8d6:	20 83       	st	Z, r18
 8d8:	8c 93       	st	X, r24
 8da:	26 81       	ldd	r18, Z+6	; 0x06
 8dc:	37 81       	ldd	r19, Z+7	; 0x07
 8de:	2f 5f       	subi	r18, 0xFF	; 255
 8e0:	3f 4f       	sbci	r19, 0xFF	; 255
 8e2:	37 83       	std	Z+7, r19	; 0x07
 8e4:	26 83       	std	Z+6, r18	; 0x06
 8e6:	14 c0       	rjmp	.+40     	; 0x910 <__stack+0x11>
 8e8:	8b 01       	movw	r16, r22
 8ea:	ec 01       	movw	r28, r24
 8ec:	fb 01       	movw	r30, r22
 8ee:	00 84       	ldd	r0, Z+8	; 0x08
 8f0:	f1 85       	ldd	r31, Z+9	; 0x09
 8f2:	e0 2d       	mov	r30, r0
 8f4:	09 95       	icall
 8f6:	89 2b       	or	r24, r25
 8f8:	e1 f6       	brne	.-72     	; 0x8b2 <fputc+0x10>
 8fa:	d8 01       	movw	r26, r16
 8fc:	16 96       	adiw	r26, 0x06	; 6
 8fe:	8d 91       	ld	r24, X+
 900:	9c 91       	ld	r25, X
 902:	17 97       	sbiw	r26, 0x07	; 7
 904:	01 96       	adiw	r24, 0x01	; 1
 906:	17 96       	adiw	r26, 0x07	; 7
 908:	9c 93       	st	X, r25
 90a:	8e 93       	st	-X, r24
 90c:	16 97       	sbiw	r26, 0x06	; 6
 90e:	ce 01       	movw	r24, r28
 910:	df 91       	pop	r29
 912:	cf 91       	pop	r28
 914:	1f 91       	pop	r17
 916:	0f 91       	pop	r16
 918:	08 95       	ret

0000091a <__ultoa_invert>:
 91a:	fa 01       	movw	r30, r20
 91c:	aa 27       	eor	r26, r26
 91e:	28 30       	cpi	r18, 0x08	; 8
 920:	51 f1       	breq	.+84     	; 0x976 <__ultoa_invert+0x5c>
 922:	20 31       	cpi	r18, 0x10	; 16
 924:	81 f1       	breq	.+96     	; 0x986 <__ultoa_invert+0x6c>
 926:	e8 94       	clt
 928:	6f 93       	push	r22
 92a:	6e 7f       	andi	r22, 0xFE	; 254
 92c:	6e 5f       	subi	r22, 0xFE	; 254
 92e:	7f 4f       	sbci	r23, 0xFF	; 255
 930:	8f 4f       	sbci	r24, 0xFF	; 255
 932:	9f 4f       	sbci	r25, 0xFF	; 255
 934:	af 4f       	sbci	r26, 0xFF	; 255
 936:	b1 e0       	ldi	r27, 0x01	; 1
 938:	3e d0       	rcall	.+124    	; 0x9b6 <__ultoa_invert+0x9c>
 93a:	b4 e0       	ldi	r27, 0x04	; 4
 93c:	3c d0       	rcall	.+120    	; 0x9b6 <__ultoa_invert+0x9c>
 93e:	67 0f       	add	r22, r23
 940:	78 1f       	adc	r23, r24
 942:	89 1f       	adc	r24, r25
 944:	9a 1f       	adc	r25, r26
 946:	a1 1d       	adc	r26, r1
 948:	68 0f       	add	r22, r24
 94a:	79 1f       	adc	r23, r25
 94c:	8a 1f       	adc	r24, r26
 94e:	91 1d       	adc	r25, r1
 950:	a1 1d       	adc	r26, r1
 952:	6a 0f       	add	r22, r26
 954:	71 1d       	adc	r23, r1
 956:	81 1d       	adc	r24, r1
 958:	91 1d       	adc	r25, r1
 95a:	a1 1d       	adc	r26, r1
 95c:	20 d0       	rcall	.+64     	; 0x99e <__ultoa_invert+0x84>
 95e:	09 f4       	brne	.+2      	; 0x962 <__ultoa_invert+0x48>
 960:	68 94       	set
 962:	3f 91       	pop	r19
 964:	2a e0       	ldi	r18, 0x0A	; 10
 966:	26 9f       	mul	r18, r22
 968:	11 24       	eor	r1, r1
 96a:	30 19       	sub	r19, r0
 96c:	30 5d       	subi	r19, 0xD0	; 208
 96e:	31 93       	st	Z+, r19
 970:	de f6       	brtc	.-74     	; 0x928 <__ultoa_invert+0xe>
 972:	cf 01       	movw	r24, r30
 974:	08 95       	ret
 976:	46 2f       	mov	r20, r22
 978:	47 70       	andi	r20, 0x07	; 7
 97a:	40 5d       	subi	r20, 0xD0	; 208
 97c:	41 93       	st	Z+, r20
 97e:	b3 e0       	ldi	r27, 0x03	; 3
 980:	0f d0       	rcall	.+30     	; 0x9a0 <__ultoa_invert+0x86>
 982:	c9 f7       	brne	.-14     	; 0x976 <__ultoa_invert+0x5c>
 984:	f6 cf       	rjmp	.-20     	; 0x972 <__ultoa_invert+0x58>
 986:	46 2f       	mov	r20, r22
 988:	4f 70       	andi	r20, 0x0F	; 15
 98a:	40 5d       	subi	r20, 0xD0	; 208
 98c:	4a 33       	cpi	r20, 0x3A	; 58
 98e:	18 f0       	brcs	.+6      	; 0x996 <__ultoa_invert+0x7c>
 990:	49 5d       	subi	r20, 0xD9	; 217
 992:	31 fd       	sbrc	r19, 1
 994:	40 52       	subi	r20, 0x20	; 32
 996:	41 93       	st	Z+, r20
 998:	02 d0       	rcall	.+4      	; 0x99e <__ultoa_invert+0x84>
 99a:	a9 f7       	brne	.-22     	; 0x986 <__ultoa_invert+0x6c>
 99c:	ea cf       	rjmp	.-44     	; 0x972 <__ultoa_invert+0x58>
 99e:	b4 e0       	ldi	r27, 0x04	; 4
 9a0:	a6 95       	lsr	r26
 9a2:	97 95       	ror	r25
 9a4:	87 95       	ror	r24
 9a6:	77 95       	ror	r23
 9a8:	67 95       	ror	r22
 9aa:	ba 95       	dec	r27
 9ac:	c9 f7       	brne	.-14     	; 0x9a0 <__ultoa_invert+0x86>
 9ae:	00 97       	sbiw	r24, 0x00	; 0
 9b0:	61 05       	cpc	r22, r1
 9b2:	71 05       	cpc	r23, r1
 9b4:	08 95       	ret
 9b6:	9b 01       	movw	r18, r22
 9b8:	ac 01       	movw	r20, r24
 9ba:	0a 2e       	mov	r0, r26
 9bc:	06 94       	lsr	r0
 9be:	57 95       	ror	r21
 9c0:	47 95       	ror	r20
 9c2:	37 95       	ror	r19
 9c4:	27 95       	ror	r18
 9c6:	ba 95       	dec	r27
 9c8:	c9 f7       	brne	.-14     	; 0x9bc <__ultoa_invert+0xa2>
 9ca:	62 0f       	add	r22, r18
 9cc:	73 1f       	adc	r23, r19
 9ce:	84 1f       	adc	r24, r20
 9d0:	95 1f       	adc	r25, r21
 9d2:	a0 1d       	adc	r26, r0
 9d4:	08 95       	ret

000009d6 <__prologue_saves__>:
 9d6:	2f 92       	push	r2
 9d8:	3f 92       	push	r3
 9da:	4f 92       	push	r4
 9dc:	5f 92       	push	r5
 9de:	6f 92       	push	r6
 9e0:	7f 92       	push	r7
 9e2:	8f 92       	push	r8
 9e4:	9f 92       	push	r9
 9e6:	af 92       	push	r10
 9e8:	bf 92       	push	r11
 9ea:	cf 92       	push	r12
 9ec:	df 92       	push	r13
 9ee:	ef 92       	push	r14
 9f0:	ff 92       	push	r15
 9f2:	0f 93       	push	r16
 9f4:	1f 93       	push	r17
 9f6:	cf 93       	push	r28
 9f8:	df 93       	push	r29
 9fa:	cd b7       	in	r28, 0x3d	; 61
 9fc:	de b7       	in	r29, 0x3e	; 62
 9fe:	ca 1b       	sub	r28, r26
 a00:	db 0b       	sbc	r29, r27
 a02:	0f b6       	in	r0, 0x3f	; 63
 a04:	f8 94       	cli
 a06:	de bf       	out	0x3e, r29	; 62
 a08:	0f be       	out	0x3f, r0	; 63
 a0a:	cd bf       	out	0x3d, r28	; 61
 a0c:	09 94       	ijmp

00000a0e <__epilogue_restores__>:
 a0e:	2a 88       	ldd	r2, Y+18	; 0x12
 a10:	39 88       	ldd	r3, Y+17	; 0x11
 a12:	48 88       	ldd	r4, Y+16	; 0x10
 a14:	5f 84       	ldd	r5, Y+15	; 0x0f
 a16:	6e 84       	ldd	r6, Y+14	; 0x0e
 a18:	7d 84       	ldd	r7, Y+13	; 0x0d
 a1a:	8c 84       	ldd	r8, Y+12	; 0x0c
 a1c:	9b 84       	ldd	r9, Y+11	; 0x0b
 a1e:	aa 84       	ldd	r10, Y+10	; 0x0a
 a20:	b9 84       	ldd	r11, Y+9	; 0x09
 a22:	c8 84       	ldd	r12, Y+8	; 0x08
 a24:	df 80       	ldd	r13, Y+7	; 0x07
 a26:	ee 80       	ldd	r14, Y+6	; 0x06
 a28:	fd 80       	ldd	r15, Y+5	; 0x05
 a2a:	0c 81       	ldd	r16, Y+4	; 0x04
 a2c:	1b 81       	ldd	r17, Y+3	; 0x03
 a2e:	aa 81       	ldd	r26, Y+2	; 0x02
 a30:	b9 81       	ldd	r27, Y+1	; 0x01
 a32:	ce 0f       	add	r28, r30
 a34:	d1 1d       	adc	r29, r1
 a36:	0f b6       	in	r0, 0x3f	; 63
 a38:	f8 94       	cli
 a3a:	de bf       	out	0x3e, r29	; 62
 a3c:	0f be       	out	0x3f, r0	; 63
 a3e:	cd bf       	out	0x3d, r28	; 61
 a40:	ed 01       	movw	r28, r26
 a42:	08 95       	ret

00000a44 <_exit>:
 a44:	f8 94       	cli

00000a46 <__stop_program>:
 a46:	ff cf       	rjmp	.-2      	; 0xa46 <__stop_program>
